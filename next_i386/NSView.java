/* Obj-C to Java:
* Class: NSView.
* File: tobjc.
*/

public class NSView extends NSResponder implements NSCoding {
    OSRect frame;
    OSRect bounds;
    float frame_rotation;
    Object super_view;
    OSMutableArray sub_views;
    Object window;
    OSMutableArray tracking_rects;
    boolean is_flipped;
    boolean is_rotated_from_base;
    boolean is_rotated_or_scaled_from_base;
    boolean opaque;
    boolean needs_display;
    boolean disable_autodisplay;
    boolean post_frame_changes;
    boolean autoresize_subviews;
    void be_view_reserved;
    Object initWithFrame(OSRect frameRect) { };
    void addSubview(OSView aView) { };
    void addSubview_positioned_relativeTo(OSView aView, OSWindowOrderingMode place, OSView otherView) { };
    OSView ancestorSharedWithView(OSView aView) { };
    boolean isDescendantOf(OSView aView) { };
    OSView opaqueAncestor() { };
    void removeFromSuperview() { };
    void replaceSubview_with(OSView oldView, OSView newView) { };
    void sortSubviewsUsingFunction_context(<fct-type> compare, void context) { };
    OSMutableArray subviews() { };
    OSView superview() { };
    void setSuperview(OSView superview) { };
    OSWindow window() { };
    void viewWillMoveToWindow(OSWindow newWindow) { };
    float frameRotation() { };
    OSRect frame() { };
    void rotateByAngle(float angle) { };
    void setFrame(OSRect frameRect) { };
    void setFrameOrigin(OSPoint newOrigin) { };
    void setFrameRotation(float angle) { };
    void setFrameSize(OSSize newSize) { };
    float boundsRotation() { };
    OSRect bounds() { };
    boolean isFlipped() { };
    boolean isRotatedFromBase() { };
    boolean isRotatedOrScaledFromBase() { };
    void scaleUnitSquareToSize(OSSize newSize) { };
    void setBounds(OSRect aRect) { };
    void setBoundsOrigin(OSPoint newOrigin) { };
    void setBoundsRotation(float angle) { };
    void setBoundsSize(OSSize newSize) { };
    void translateOriginToPoint(OSPoint point) { };
    OSRect centerScanRect(OSRect aRect) { };
    OSPoint convertPoint_fromView(OSPoint aPoint, OSView aView) { };
    OSPoint convertPoint_toView(OSPoint aPoint, OSView aView) { };
    OSRect convertRect_fromView(OSRect aRect, OSView aView) { };
    OSRect convertRect_toView(OSRect aRect, OSView aView) { };
    OSSize convertSize_fromView(OSSize aSize, OSView aView) { };
    OSSize convertSize_toView(OSSize aSize, OSView aView) { };
    boolean postsFrameChangedNotifications() { };
    void setPostsFrameChangedNotifications(boolean flag) { };
    void resizeSubviewsWithOldSize(OSSize oldSize) { };
    void setAutoresizesSubviews(boolean flag) { };
    boolean autoresizesSubviews() { };
    void setAutoresizingMask(int mask) { };
    int autoresizingMask() { };
    void resizeWithOldSuperviewSize(OSSize oldSize) { };
    void allocateGState() { };
    void releaseGState() { };
    int gState() { };
    void renewGState() { };
    void setUpGState() { };
    OSView focusView() { };
    void lockFocus() { };
    void unlockFocus() { };
    boolean canDraw() { };
    void display() { };
    void displayIfNeeded() { };
    void displayIfNeededIgnoringOpacity() { };
    void displayRect(OSRect aRect) { };
    void displayRectIgnoringOpacity(OSRect aRect) { };
    void drawRect(OSRect rect) { };
    OSRect visibleRect() { };
    boolean isOpaque() { };
    boolean needsDisplay() { };
    void setNeedsDisplay(boolean flag) { };
    void setNeedsDisplayInRect(OSRect invalidRect) { };
    boolean shouldDrawColor() { };
    OSRect adjustScroll(OSRect newVisible) { };
    boolean autoscroll(OSEvent theEvent) { };
    void reflectScrolledClipView(OSClipView aClipView) { };
    void scrollClipView_toPoint(OSClipView aClipView, OSPoint aPoint) { };
    void scrollPoint(OSPoint aPoint) { };
    void scrollRect_by(OSRect aRect, OSSize delta) { };
    boolean scrollRectToVisible(OSRect aRect) { };
    void addCursorRect_cursor(OSRect aRect, OSCursor anObject) { };
    void discardCursorRects() { };
    void removeCursorRect_cursor(OSRect aRect, OSCursor anObject) { };
    void resetCursorRects() { };
    int tag() { };
    Object viewWithTag(int aTag) { };
    boolean acceptsFirstMouse(OSEvent theEvent) { };
    OSView hitTest(OSPoint aPoint) { };
    boolean mouse_inRect(OSPoint aPoint, OSRect aRect) { };
    boolean performKeyEquivalent(OSEvent theEvent) { };
    void removeTrackingRect(OSTrackingRectTag tag) { };
    boolean shouldDelayWindowOrderingForEvent(OSEvent anEvent) { };
    OSTrackingRectTag addTrackingRect_owner_userData_assumeInside(OSRect aRect, Object anObject, void data, boolean flag) { };
    OSArray trackingRectangles() { };
    boolean dragFile_fromRect_slideBack_event(String filename, OSRect rect, boolean slideFlag, OSEvent event) { };
    void dragImage_at_offset_event_pasteboard_source_slideBack(OSImage anImage, OSPoint viewLocation, OSSize initialOffset, OSEvent event, OSPasteboard pboard, Object sourceObject, boolean slideFlag) { };
    void registerForDraggedTypes(OSArray newTypes) { };
    void unregisterDraggedTypes() { };
    OSData dataWithEPSInsideRect(OSRect aRect) { };
    void fax(Object sender) { };
    void print(Object sender) { };
    void writeEPSInsideRect_toPasteboard(OSRect rect, OSPasteboard pasteboard) { };
    void adjustPageHeightNew_top_bottom_limit(float newBottom, float oldTop, float oldBottom, float bottomLimit) { };
    void adjustPageWidthNew_left_right_limit(float newRight, float oldLeft, float oldRight, float rightLimit) { };
    float heightAdjustLimit() { };
    boolean knowsPagesFirst_last(int firstPageNum, int lastPageNum) { };
    OSPoint locationOfPrintRect(OSRect aRect) { };
    OSRect rectForPage(int page) { };
    float widthAdjustLimit() { };
    void addToPageSetup() { };
    void beginPage_label_bBox_fonts(int ordinalNum, String aString, OSRect pageRect, String fontNames) { };
    void beginPageSetupRect_placement(OSRect aRect, OSPoint location) { };
    void beginPrologueBBox_creationDate_createdBy_fonts_forWhom_pages_title(OSRect boundingBox, String dateCreated, String anApplication, String fontNames, String user, int numPages, String aTitle) { };
    void beginSetup() { };
    void beginTrailer() { };
    void drawPageBorderWithSize(OSSize borderSize) { };
    void drawSheetBorderWithSize(OSSize borderSize) { };
    void endHeaderComments() { };
    void endPrologue() { };
    void endSetup() { };
    void endPageSetup() { };
    void endPage() { };
    void endTrailer() { };
    void encodeWithCoder(Object aCoder) { };
    Object initWithCoder(Object aDecoder) { };

}


