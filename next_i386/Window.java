/* Obj-C to Java:
* Class: Window.
* File: tobjc.
*/

public class Window extends Responder {
    NXRect frame;
    Object contentView;
    Object delegate;
    Object firstResponder;
    Object lastLeftHit;
    Object lastRightHit;
    Object counterpart;
    Object fieldEditor;
    int winEventMask;
    int windowNum;
    float backgroundGray;
    Object _borderView;
    short _displayDisabled;
    short _flushDisabled;
    void _cursorRects;
    NXHashTable _trectTable;
    Object _invalidCursorView;
    Object _miniIcon;
    void _private;
    Object getFrameRect_forContentRect_style(NXRect fRect, NXRect cRect, int aStyle) { };
    Object getContentRect_forFrameRect_style(NXRect cRect, NXRect fRect, int aStyle) { };
    NXCoord minFrameWidth_forStyle_buttonMask(char aTitle, int aStyle, int aMask) { };
    NXWindowDepth defaultDepthLimit() { };
    Object init() { };
    Object initContent_style_backing_buttonMask_defer(NXRect contentRect, int aStyle, int bufferingType, int mask, boolean flag) { };
    Object initContent_style_backing_buttonMask_defer_screen(NXRect contentRect, int aStyle, int bufferingType, int mask, boolean flag, NXScreen screen) { };
    Object free() { };
    Object awake() { };
    Object setTitle(char aString) { };
    Object setTitleAsFilename(char aString) { };
    Object setExcludedFromWindowsMenu(boolean flag) { };
    boolean isExcludedFromWindowsMenu() { };
    Object setContentView(Object aView) { };
    Object contentView() { };
    Object setDelegate(Object anObject) { };
    Object delegate() { };
    char title() { };
    int buttonMask() { };
    int windowNum() { };
    Object getFieldEditor_for(boolean createFlag, Object anObject) { };
    Object endEditingFor(Object anObject) { };
    Object placeWindowAndDisplay(NXRect frameRect) { };
    Object placeWindow(NXRect frameRect) { };
    Object placeWindow_screen(NXRect frameRect, NXScreen screen) { };
    boolean constrainFrameRect_toScreen(NXRect frameRect, NXScreen screen) { };
    Object sizeWindow(NXCoord width, NXCoord arg2) { };
    Object moveTo(NXCoord x, NXCoord arg2) { };
    Object moveTopLeftTo(NXCoord x, NXCoord arg2) { };
    Object moveTo_screen(NXCoord x, NXCoord arg2, NXScreen screen) { };
    Object moveTopLeftTo_screen(NXCoord x, NXCoord arg2, NXScreen screen) { };
    Object getFrame(NXRect theRect) { };
    Object getFrame_andScreen(NXRect rect, NXScreen screen) { };
    Object getMouseLocation(NXPoint thePoint) { };
    int style() { };
    Object useOptimizedDrawing(boolean flag) { };
    Object disableFlushWindow() { };
    Object reenableFlushWindow() { };
    boolean isFlushWindowDisabled() { };
    Object flushWindow() { };
    Object flushWindowIfNeeded() { };
    Object disableDisplay() { };
    Object reenableDisplay() { };
    boolean isDisplayEnabled() { };
    Object displayIfNeeded() { };
    Object display() { };
    Object update() { };
    int setEventMask(int newMask) { };
    int addToEventMask(int newEvents) { };
    int removeFromEventMask(int oldEvents) { };
    int eventMask() { };
    Object setTrackingRect_inside_owner_tag_left_right(NXRect aRect, boolean insideFlag, Object anObject, int trackNum, boolean leftDown, boolean rightDown) { };
    Object discardTrackingRect(int trackNum) { };
    Object makeFirstResponder(Object aResponder) { };
    Object firstResponder() { };
    Object sendEvent(NXEvent theEvent) { };
    Object windowExposed(NXEvent theEvent) { };
    Object windowMoved(NXEvent theEvent) { };
    Object screenChanged(NXEvent theEvent) { };
    int resizeFlags() { };
    Object makeKeyWindow() { };
    Object becomeKeyWindow() { };
    Object resignKeyWindow() { };
    Object becomeMainWindow() { };
    Object resignMainWindow() { };
    Object displayBorder() { };
    Object rightMouseDown(NXEvent theEvent) { };
    boolean commandKey(NXEvent theEvent) { };
    Object close() { };
    Object setFreeWhenClosed(boolean flag) { };
    Object miniaturize(Object sender) { };
    Object deminiaturize(Object sender) { };
    boolean tryToPerform_with(SEL anAction, Object anObject) { };
    Object validRequestorForSendType_andReturnType(NXAtom sendType, NXAtom returnType) { };
    Object setBackgroundGray(float value) { };
    float backgroundGray() { };
    Object setBackgroundColor(NXColor color) { };
    NXColor backgroundColor() { };
    Object dragFrom_eventNum(float x, float arg2, int num) { };
    Object setHideOnDeactivate(boolean flag) { };
    boolean doesHideOnDeactivate() { };
    Object center() { };
    Object makeKeyAndOrderFront(Object sender) { };
    Object orderFront(Object sender) { };
    Object orderBack(Object sender) { };
    Object orderOut(Object sender) { };
    Object orderWindow_relativeTo(int place, int otherWin) { };
    Object orderFrontRegardless() { };
    Object setMiniwindowIcon(char anIcon) { };
    Object setMiniwindowImage(Object image) { };
    Object setMiniwindowTitle(char title) { };
    char miniwindowIcon() { };
    NXImage miniwindowImage() { };
    char miniwindowTitle() { };
    Object setDocEdited(boolean flag) { };
    boolean isDocEdited() { };
    boolean isVisible() { };
    boolean isKeyWindow() { };
    boolean isMainWindow() { };
    boolean canBecomeKeyWindow() { };
    boolean canBecomeMainWindow() { };
    boolean worksWhenModal() { };
    Object convertBaseToScreen(NXPoint aPoint) { };
    Object convertScreenToBase(NXPoint aPoint) { };
    Object performClose(Object sender) { };
    Object performMiniaturize(Object sender) { };
    int gState() { };
    Object setOneShot(boolean flag) { };
    boolean isOneShot() { };
    Object faxPSCode(Object sender) { };
    Object printPSCode(Object sender) { };
    Object copyPSCodeInside_to(NXRect rect, NXStream stream) { };
    Object smartFaxPSCode(Object sender) { };
    Object smartPrintPSCode(Object sender) { };
    boolean knowsPagesFirst_last(int firstPageNum, int lastPageNum) { };
    Object openSpoolFile(char filename) { };
    Object beginPSOutput() { };
    Object beginPrologueBBox_creationDate_createdBy_fonts_forWhom_pages_title(NXRect boundingBox, char dateCreated, char anApplication, char fontNames, char user, int numPages, char aTitle) { };
    Object endHeaderComments() { };
    Object endPrologue() { };
    Object beginSetup() { };
    Object endSetup() { };
    Object beginPage_label_bBox_fonts(int ordinalNum, char aString, NXRect pageRect, char fontNames) { };
    Object beginPageSetupRect_placement(NXRect aRect, NXPoint location) { };
    Object endPageSetup() { };
    Object endPage() { };
    Object beginTrailer() { };
    Object endTrailer() { };
    Object endPSOutput() { };
    Object spoolFile(char filename) { };
    float heightAdjustLimit() { };
    float widthAdjustLimit() { };
    boolean getRect_forPage(NXRect theRect, int page) { };
    Object placePrintRect_offset(NXRect aRect, NXPoint location) { };
    Object addCursorRect_cursor_forView(NXRect aRect, Object anObj, Object aView) { };
    Object removeCursorRect_cursor_forView(NXRect aRect, Object anObj, Object aView) { };
    Object disableCursorRects() { };
    Object enableCursorRects() { };
    Object discardCursorRects() { };
    Object invalidateCursorRectsForView(Object aView) { };
    Object resetCursorRects() { };
    Object setBackingType(int bufferingType) { };
    int backingType() { };
    Object setAvoidsActivation(boolean flag) { };
    boolean avoidsActivation() { };
    Object setDepthLimit(NXWindowDepth limit) { };
    NXWindowDepth depthLimit() { };
    Object setDynamicDepthLimit(boolean flag) { };
    boolean hasDynamicDepthLimit() { };
    NXScreen screen() { };
    NXScreen bestScreen() { };
    boolean canStoreColor() { };
    Object counterpart() { };
    void saveFrameToString(char string) { };
    void setFrameFromString(char string) { };
    void saveFrameUsingName(char name) { };
    boolean setFrameUsingName(char name) { };
    boolean setFrameAutosaveName(char name) { };
    char frameAutosaveName() { };
    void removeFrameUsingName(char name) { };
    Object getMinSize(NXSize size) { };
    Object getMaxSize(NXSize size) { };
    Object setMinSize(NXSize size) { };
    Object setMaxSize(NXSize size) { };
    Object write(NXTypedStream stream) { };
    Object read(NXTypedStream stream) { };
    Object newContent_style_backing_buttonMask_defer(NXRect contentRect, int aStyle, int bufferingType, int mask, boolean flag) { };
    Object newContent_style_backing_buttonMask_defer_screen(NXRect contentRect, int aStyle, int bufferingType, int mask, boolean flag, NXScreen screen) { };
    Object new() { };

}


